eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
eval "$(starship init zsh)"
eval "$(zoxide init --cmd cd zsh)"

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
### End of Zinit's installer chunk

# Essential Plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

# History Options for Autosuggestions
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors '${(s.:.)LS_COLORS}'

### Aliases
alias refresh="source ~/.zshrc"
alias l="ls -a --color"
alias ls="ls --color"
alias v="nvim ."

# Development Shortcuts
alias dc="docker compose"

# Directory Quick Access
alias dev="cd ~/Dev"
alias me="cd ~/Personal"
alias notes="cd ~/notes"

# Config Quick Access
alias dots="cd ~/.dotfiles"
alias zshconf="nvim ~/.zshrc"
alias nvconf="cd ~/.config/nvim; nvim ."
alias alaconf="nvim ~/.config/alacritty"
alias tmuxconf="nvim ~/.tmux.conf"
alias wezconf="cd ~/.config/wezterm; nvim ."

# Git aliases
alias gmp='git checkout master; git pull;'
alias gdp='git checkout develop; git pull;'
alias gm='git checkout master'
alias gs='git status'
alias gco='git checkout'
alias gcb='git checkout -b'
alias grn='git branch -m'
alias gt='git log --all --decorate --oneline --graph'
alias gb='git branch -a -vv'
alias gsl='git stash list'

checkout_advanced() {
    if [[ -n $1 ]] then
        git checkout $1
        return
    fi
    git branch | fzf-tmux -p | xargs git checkout
}
alias gco=checkout_advanced

stash-curr() {
    git stash save $1
}
alias gss=stash-curr

apply-stash() {
    git stash apply $1
}
alias gsa=apply-stash

open-git-remote() {
    git remote -v | cut -w -f2 | fzf-tmux -p | xargs open
}
alias remote=open-git-remote

create-commit() {
    git commit -m "$1"
}
alias gc=create-commit

reset-soft-commit() {
    git reset --soft HEAD~$1
}
alias grs=reset-soft-commit

# Fuzzy Find Aliases
# deps: fzf, fd
find_project() {
    local proj
    proj=$(fd . ~/Dev --type d -a -d 1 | fzf-tmux -p)

    if [[ -n $proj ]] then
        echo "\n\tðŸ›¬ You are now in: $proj\n"
        cd $proj
    fi
}
alias f='fd --hidden --exclude .git| fzf-tmux -p | xargs nvim'

alias fp=find_project
